<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="kr.or.ddit.mapper.jhs.MyLibraryMapper">
 	
 	
 	
 	<!-- 정렬한 타입 -->
 	<sql id="ebookType">
		<if test="searchType != null and searchType == 'order-young'">
			order by em_date desc
		</if>
		<if test="searchType != null and searchType == 'order-old'">
			order by em_date
		</if>
	</sql>
	
 	<!-- 나의 하루 사용자 정보 가져오기 -->
 	<select id="callComMember" parameterType="string" resultType="comMemberVO">
 			select 
 			 	ae_id			<!-- 사용자 아이디 -->
 			  , mem_profile		<!-- 사용자 프로필 -->	
 			  , mem_nicknm		<!-- 사용자 닉네임 -->
 			from
 			 	com_member
 			where
 				ae_id = #{ae_id}
 	</select>
	
 	<!-- 페이징에 맞추어서 사용자가 가지고 있는 ebook리스트 꺼내오기 -->
 	<select id="getEbookList" parameterType="ebookPageVO" resultType="ebookManagerVO">
		  select
			  b.ae_id			 <!-- 사용자 아이디 -->
               , b.book_no			 <!-- 책 번호 -->
               , b.book_page		 <!-- 책 페이지-->
               , b.book_read_ymd	 <!-- 책 마지막 읽은 날짜 -->
               , b.em_date			 <!-- 책 구매날짜 -->
               , b.em_read_page	 <!-- 책 읽은 페이지 -->
               , b.ebook_file		 <!-- 책 파일명 -->
               , b.ebook_coordinate <!-- 사용자 아이디 -->
               , b.book_title		 <!-- 책 제목 -->
               , b.book_cover		 <!-- 책 커버 -->
		from(
			select
                      a.*, row_number() over (<include refid="ebookType"/>) rnum
			from(
				select
						c.ae_id
					, c.book_no
					, c.book_page
					, c.book_read_ymd
					, c.em_date
					, c.em_read_page
					, c.ebook_file
					, c.ebook_coordinate
                       , d.book_title
                       , d.book_cover
				from 
					ebook_manage c, books d
				where
                       c.book_no = d.book_no
                   and    
					ae_id = #{ae_id}
                   and 
                   	d.book_title LIKE '%${searchWord}%'
			) a
		) b
		<![CDATA[
			where 
				b.rnum >= #{startRow} and b.rnum <= #{endRow}	
		]]>
 	</select>
 	
 	<!-- 추가적으로 필요한 책제목과 책커버 정보 가져오기 -->
 	<select id="getEbookDetailList" parameterType="string" resultType="ebookManagerVO">
	 	select 
	        book_title
	    ,   book_cover
		from
	    	books
		where
	    	book_no = #{book_no}
 	</select>
 	
 	<!-- 현재 페이지의 ebook list의 갯수 가져오기 -->
 	<select id="selectEbookListCount" parameterType="ebookPageVO" resultType="int">
		select 
			count(a.book_no)
		from 
			ebook_manage a, books b
		where
		    a.book_no = b.book_no
		and
		    ae_id = #{ae_id}
		and 
            book_title LIKE '%${searchWord}%'
		<include refid="ebookType"/>
	</select>
	
	<!--  모든 ebook 갯수 가져오기 -->
	<select id="selectAllRecord" parameterType="string" resultType="int">
		select 
			count(book_no) 
		from 
			ebook_manage 
		where 
			ae_id = #{ae_id}
	</select>
 	
 	<select id="getEbookManager" parameterType="string" resultType="ebookManagerVO">
 		select 
 			  ae_id
 			, book_no
 			, book_page
 			, book_read_ymd
 			, em_date
 			, em_read_page
 			, ebook_file
 			, ebook_coordinate
 		from
 			ebook_manage
 		where
 			book_no = #{book_no} 
 		and
 			ae_id = #{ae_id}
 	</select>
 	
 	<update id="updateReadPage" parameterType="ebookManagerVO">
 		update
 			ebook_manage
 		set
 			  book_read_ymd = to_char(sysdate, 'YYYY/MM/DD')
 			, em_read_page = #{em_read_page}
 		where
 			  ae_id = #{ae_id}
 		and
 			  book_no = #{book_no}  	
 	</update>
 	
 	
 	<insert id="insertBookRecode" parameterType="ebookManagerVO">
 		insert 
 		into 
 			ebook_recode(
 			  er_page
 			, ae_id
 			, book_no  
 		)values(
 			  #{em_read_page}
 			, #{ae_id}
 			, #{book_no}  
 		)			
 	</insert>
 	
 	<select id="getEbookRecode" parameterType="ebookManagerVO" resultType="int">
 		select
 			er_page
 		from
 			ebook_recode
 		where
 			  ae_id = #{ae_id}
 			, book_no = #{book_no}  
 	</select>
 </mapper>