package kr.or.ddit.controller.kmw.login;

import javax.inject.Inject;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.ResultStatus;
import kr.or.ddit.service.LoginService;
import kr.or.ddit.vo.UserInfoVO;

@Controller
@RequestMapping("/login")
public class LoginController {
	
	@Inject
	private LoginService service;
	
	@Inject
	private BCryptPasswordEncoder pe;
	
	// 로그인 폼으로 이동
	@GetMapping("/signinForm")
	public String signinForm(@RequestParam(name = "state", required = false, defaultValue = "0") int state
			, Model model) {
		
		if(state == 1) {
			model.addAttribute("msg","하루북스 회원이되신걸 환영합니다");
		}
		if(state == 2) {
			model.addAttribute("msg","로그인에 실패하였습니다 다시 로그인해주세요");
		}
		return "login/login";
	}
	
	// 로그인 로직 처리
	@PostMapping("/signin.do")
	public String signin() {
		return "";
	}
	
	// 회원가입 폼으로 이동
	@GetMapping("/signupForm")
	public String signupForm() {
		return "login/join";
	}
	
	
	
	// 회원가입 로직 처리
	@PostMapping("/signup.do")
	public String signup(UserInfoVO user) {
		String encodePw = pe.encode(user.getAe_pw());
		user.setAe_pw(encodePw);
		System.out.println(user.getAe_id());
		System.out.println(user.getAe_pw());
		ResultStatus result = service.insertMember(user);
		if(result.equals(ResultStatus.OK)) {
			return "redirect:/login/signinForm?state=1";
		}else {
			return "redircet:/login/signupForm?state=1";
		}
	}
	
	// 아이디 중복확인 로직
	@ResponseBody
	@PostMapping("/idCheck")
	public String idCheck(@RequestBody String idVal) {
		ResultStatus result = service.idCheck(idVal);
		if(result.equals(ResultStatus.OK)) {
			return "ok";
		}else {
			return "fail";
		}
	}
	
	// 아이디/비밀번호 찾기폼 이동
	@GetMapping("/findInfoForm")
	public String findInfoForm() {
		return "login/findByIdPw";
	}
	
	// 아이디 찾기 로직 처리
	@PostMapping("/findId.do")
	public String findInfo() {
		return "";
	}
	// 비밀번호 찾기 로직 처리
	@PostMapping("/findPw.do")
	public String findPw() {
		return "";
	}
	
	// 비회원 배송조회 폼이동
	@GetMapping("/nonMemberDeliveryForm")
	public String nonMemberDeliveryForm() {
		return "login/nonMemberDelivery";
	}
	// 비회원 배송조회 로직 처리
	@PostMapping("/nonMemberDelivery.do")
	public String nonMemberDelivery() {
		return "";
	}
	
	// logout 실행
	@GetMapping("/logout")
	public String logout() {
		return"";
	}
	
	// error-page실행
	@GetMapping("/errorPage")
	public String error() {
		return "";
	}
}
