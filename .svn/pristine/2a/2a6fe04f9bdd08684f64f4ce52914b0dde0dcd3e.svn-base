<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>
<!DOCTYPE html>
<html>
<head>
<style>
   @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200&display=swap');
   @import url('https://fonts.googleapis.com/css2?family=Nanum+Pen+Script&display=swap');
   @import url('https://fonts.googleapis.com/css2?family=Jua&display=swap');
   @import url('https://fonts.googleapis.com/css2?family=Nanum+Gothic&display=swap');

.next-button, .previous-button{
	cursor: pointer;
}

.flipbook{
	border: 0.7px solid rgba(202, 202, 202, 0.5);
}

.flipbook .even .gradient {
	position:absolute;top:0;left:0;width:100%;height:100%;
	background:-webkit-gradient(linear,left top,right top,color-stop(0.95,rgba(0,0,0,0)),color-stop(1,rgba(0,0,0,0.2)));
	background-image:-webkit-linear-gradient(left,rgba(0,0,0,0) 95%,rgba(0,0,0,0.2) 100%);
	background-image:-moz-linear-gradient(left,rgba(0,0,0,0) 95%,rgba(0,0,0,0.2) 100%);
	background-image:-ms-linear-gradient(left,rgba(0,0,0,0) 95%,rgba(0,0,0,0.2) 100%);
	background-image:-o-linear-gradient(left,rgba(0,0,0,0) 95%,rgba(0,0,0,0.2) 100%);
	background-image:linear-gradient(left,rgba(0,0,0,0) 95%,rgba(0,0,0,0.2) 100%);
	cursor: pointer;
}
.flipbook .odd .gradient {position:absolute;top:0;left:0;width:100%;height:100%;
	background:-webkit-gradient(linear,right top,left top,color-stop(0.95,rgba(0,0,0,0)),color-stop(1,rgba(0,0,0,0.15)));
	background-image:-webkit-linear-gradient(right,rgba(0,0,0,0) 95%,rgba(0,0,0,0.15) 100%);
	background-image:-moz-linear-gradient(right,rgba(0,0,0,0) 95%,rgba(0,0,0,0.15) 100%);
	background-image:-ms-linear-gradient(right,rgba(0,0,0,0) 95%,rgba(0,0,0,0.15) 100%);
	background-image:-o-linear-gradient(right,rgba(0,0,0,0) 95%,rgba(0,0,0,0.15) 100%);
	background-image:linear-gradient(right,rgba(0,0,0,0) 95%,rgba(0,0,0,0.15) 100%);
	cursor: pointer;
}

#bookForm{
	display: flex;
}

#btns{
	position: fixed;
	display: grid;
    right: 70px;
    top: 80px;
    height: 100px;
}

.book-btn{
	cursor: pointer;
	margin-top: 20px;
	padding: 10px 30px 10px 30px;
	border-radius: 5px;
	border: none;
	box-shadow: 1px grey;
	background-color: #53b12e;
	font-family: 'Nanum Gothic', sans-serif;
	color: white;
	font-weight: bold;
}

#controls{
	justify-content: center;
	margin-top: 30px;
	display: flex;
	align-items: center;
}


#controls label{
	font-family: 'Nanum Gothic', sans-serif;
	font-size: 17px;
	font-weight: bold;
	color : #53b12e;
}

#controls input[type=text]{
	font-family: 'Nanum Gothic', sans-serif;
	width: 15px;
	text-align: center;
	padding: 0px 15px 0px 15px;
	border: 0.5px solid grey;
	color: grey;
	font-size: 0.8rem;
}


.btn{
	color: #53b12e;
	font-size: 20px;
	transition: transform 0.3s;
}

.spacing{
	margin-right: 10px;
}
  
.btn:hover {
  transform: scale(1.5);
}


.previous-button{
	margin-right: 20px;
}

.next-button{
	margin-left: 20px;
}

#loading {
     width: 100%;
     height: 100%;
     top: 0;
     left: 0;
     position: fixed;
     display: block;
     opacity: 0.6;
     background: #e4e4e4;
     z-index: 99;
     text-align: center;
 }

 #loading>img {
   position: absolute;
   top: 40%;
   left: 45%;
   z-index: 100;
 }

 #loading>p {
   position: absolute;
   top: 57%;
   left: 43%;
   z-index: 101;
 }
 
 .mark{
 	  display: none;
      width: 0px;
      height: 20px;
      margin-bottom: 40px;
      padding: 10px 30px 10px 5px;
      color: white;
      background: #53b12e;
      font-family: 'Nanum Gothic', sans-serif;
      font-size: 1.0em;
      font-weight: bold;
      position: relative;
      transition: width 0.3s ease;
   }
   
   .mark::before {
       content: "";
       position: absolute;
       top: 50%;
       right: 0px;
       transform: translateY(-50%);
       width: 0;
       height: 0;
       border-top: 20px solid transparent; 
       border-bottom: 20px solid transparent;
       border-right: 20px solid white;
       transition: width 0.3s ease; /* 부드러운 효과를 위한 transition 추가 */
   }
</style>

<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<input type="hidden" value='<sec:authentication property="name"/>' id="sec-name">
	<input id="ebookFileNm" type='hidden' value='${ebook.ebook_file }'>
	<input id="bookNo" type='hidden' value='${ebook.book_no }'>
	<input id="readPage" type='hidden' value='${ebook.em_read_page }'>
	
	<div id="bookForm">
		<div class="flip_book flipbook"></div>
		<div class="mark" id="bookMark"></div>
		<div id="loading">
    		<img src="https://studentrights.sen.go.kr/images/common/loading.gif">
  		</div>
		<div id="btns"> 
			<button class="book-btn" id="bookmark-input">책갈피 등록</button>
			<button class="book-btn" id="bookmark-out">책갈피 해제</button>
			<button class="book-btn" id="memo">메모하기</button>
			<button class="book-btn" id="bookmark-list">책갈피 리스트</button>
			<button class="book-btn" id="voice">음성듣기</button>
			<button class="book-btn" id="trans">번역</button>
			<button class="book-btn" id="page-save">현재 페이지 저장</button>
		</div>
	</div>
	<div id="controls">
		<div class="btn previous-button">◀</div>
		<label class="spacing" for="page-number">Page:</label>
		<input  type="text" size="3" class="page-number spacing"><span class="spacing">of</span><span class="number-pages spacing"></span>
		<div class="btn next-button">▶</div>
	</div>
	
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.min.js"></script>
<script type="text/javascript" src="../resources/js/turnjs/lib/turn.js"></script>
<script type="text/javascript">
	var readPage = $("#readPage");             // 읽어온 페이지 string형
	var startPage = parseInt(readPage.val());  // 읽어온 페이지를 int형으로 변환
	var bookMark = $("#bookMark");			   // 책갈피 부분
	var pageSave = $("#page-save");			   // 책 저장하는 부분
	var bookmarkInput = $("#bookmark-input");  // 책갈피 등록 버튼
	var prev = $(".previous-button");		   // 이전 페이지
	var next = $(".next-button");			   // 다음 페이지
	var ebookFileNm = document.querySelector("#ebookFileNm").value;  // e북 파일 이름
	var numberOfPages = 0;					   // 전체 페이지 처음엔 0으로 설정 후 pdf 파일을 읽어서 다시 저장
	var url = '../resources/ebook/'+ebookFileNm; // e북 파일 이름을 토대로 꺼내기
	
	var name = document.querySelector("#sec-name");	// 세션 사용자 정보 가져오기
	var bookNo = document.querySelector("#bookNo"); // 책 번호 가져오기
	var rendered = [];			
	var firstPagesRendered = false;

	var pdf 		= null;
	var pageNum = 1;
	// 크기 조절
	var scale 	= 0.6;
	width = 1248;
	height = 430;
	
	function allSave(info){
		if(numberOfPages)
		var pageCount = $('.page-number').val();
		var name = document.querySelector("#sec-name").value;
		var bookNo= document.querySelector("#bookNo").value;
		var urlInfo;
		var successContent;
		if(info==1){
			urlInfo = "/myHaru/updateReadPage";
			successContent = "저장 성공!";
		}else if(info==2){
			urlInfo = "/myHaru/insertBookRecode";
		}
		
		$.ajax({
			type : "post",
			url : urlInfo,
			data: {
				ae_id:name,
				em_read_page:pageCount,
				book_no:bookNo
			},
			beforeSend : function(xhr){
				xhr.setRequestHeader("${_csrf.headerName}", "${_csrf.token}");
			},
			success: function(res){
				console.log(res);
				if(res!='OK'){
					alert("네트워크 오류! 다시 눌러주세요!");
					window.opener.location.reload();
				}else{
					if(successContent!=null){
						alert(successContent);								
					}
					window.opener.location.reload();
				}
         	},
         	error: function(ex){
         		console.log("error", ex);
         	}
		});	
	}
	
	pageSave.on('click',function(){
		allSave(1);		
	});
	
	bookmarkInput.on('click', function(){
		allSave(2);
		
		// #bookMark 요소 보이기
	    bookMark.css('display', 'block');
	    bookMark.css('opacity', '0'); // 초기 투명도 설정

	    // #bookMark 요소 보이기
	    bookMark.css('display', 'block');
	    bookMark.css('opacity', '0'); // 초기 투명도 설정

	    // 애니메이션 효과 추가
	    bookMark.animate(
	        {
	            width: '30px', // 오른쪽으로 펼쳐짐
	            opacity: '1' // 투명도 증가
	        },
	        500, // 애니메이션 지속 시간
	        function(){
	            // 애니메이션 완료 후 초기화
	            $(this).css({
	                opacity: ''
	            });
	        }
	    );
	})
	
	$(document).ready(function(){
		 $('#loading').show();	
		pdfjsLib.getDocument(url).promise.then(function(pdfDoc) {
			numberOfPages = pdfDoc.numPages; 
			// PDF의 총 페이지수를 저장
			$('.flip_book').turn.pages = numberOfPages;

			pdf = pdfDoc;
			
			$('.flip_book').turn({
				width: width,	
				height: height,
				acceleration: false,	// 가속 여부
				pages: numberOfPages,	// 총 페이지 수 등록
				elevation: 150,			// 측면 효과 높을 수록 더 실제 효과
				gradients: true,		// 그라데이션 효과 사용여부 !$.isTouch를 사용하여 Touch가 불가능하다
				when: {
					turning: function(e, page, view) {
						var range = $(this).turn('range', page);
						for (page = range[0]; page<=range[1]; page++) {
							addPage(page, $(this));
						};
					},
					turned: function(e, page) {
							var range=$(this).turn('range', page);
							$('.page-number').val(range[0]+2);
							for (page=range[0]; page<=range[1]; page++) {
								if (!rendered[page]) {
									renderPage(page); rendered[page]=true;
								}
							}
							
		                    // 모든 페이지가 로드되었는지 확인
		                    var allPagesLoaded = rendered.every(function(value) {
		                        return value;
		                    });

		                    if (allPagesLoaded) {
		                        // 모든 페이지 로딩 완료 시 로딩 숨김
		                        $('#loading').hide();
		                    }	
		                                 
					}, missing : function(e, page){
						var range=$(this).turn('range', page);
						$('.page-number').val(range[0]+2);
						var n = numberOfPages;
						n = n > 6 ? (6 + 1) : n;
						for (page = 1; page < n; page++){
							addPage(page, $(this));
							renderPage(page);
							rendered[page] = true;
						}
						firstPagesRendered = true;
					}
				}
			});
			

			
			$('.flip_book').turn('page', startPage);
			for(var i = startPage - 2; i < startPage + 2; i++){
				if (!rendered[i]) {
					renderPage(i); 
					rendered[i]=true;		
				}
			}

			var range= $(this).turn('range', startPage);
			$('.page-number').val(startPage);
			
			$('.number-pages').text($('.flip_book').turn.pages);
					
			$('.page-number').keydown(function(e){
				var p = $('.page-number').val();
				console.log(range);
				if (e.keyCode==13) {
					$('.flip_book').turn('page', p);
					renderPage(p);
					var range=$(this).turn('range', page);
					$('.page-number').val(range[0]+2);
				}
			});
		});
		
		 $('#loading').hide();	
	});
	
	
	$(document).keydown(function(e){
		if (e.target && e.target.tagName.toLowerCase()!='input'){
			if (e.keyCode==37){
				$('.flip_book').turn('previous');
			} else if (e.keyCode==39) {
				$('.flip_book').turn('next');
			}
		}
	});
	
	next.on('click', function(){
		$('.flip_book').turn('next');
	})
	
	prev.on('click', function(){
		$('.flip_book').turn('previous');
	})

	function renderPage(num) {

		pdf.getPage(num).then(function(page) {
			viewport = page.getViewport({scale : scale});

			var canvasID = 'canv' + num;
			var canvas = $('#' + canvasID)[0];

			if (canvas == null){
				return;
			}

			var context = canvas.getContext('2d');

		    // PDF 사이즈를 고정된 값으로 설정
		    var fixedWidth = 600; // 고정할 가로 크기
		    var fixedHeight = 800; // 고정할 세로 크기
		    canvas.width = fixedWidth;
		    canvas.height = fixedHeight;

			var renderContext = {
				canvasContext: context,
				viewport: viewport
			};

			page.render(renderContext);

			// rendering 여부 확인
			var renderTask = page.render(renderContext);
			renderTask.promise.then(function () {	
				console.log(canvasID+'Page rendered');
			});

			// 플립북 pdf사이즈에 맞게 재조절
			$('.flip_book').turn('size',(canvas.width * 2), canvas.height)
		});
	}

	function addPage(page, book) {
		if (!book.turn('hasPage', page)) {
			var element = $('<div />', {'id': 'page-'+page});
			element.html('<div class="data"><canvas id="canv' + page + '"></canvas></div><div class="gradient"></div>');
			book.turn('addPage', element, page);
		}
		
	}
	pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.worker.min.js';
</script>
</body>

</html>
